#!/usr/bin/env python3
import sys
import os
import argparse
import subprocess
import time
from Bio import SeqIO

def get_para(para_list=None):
    desc = '''
    To generate a configure file to use YangChentao's `draw_circos_for_mitogenome_auto_depth.pl`
    '''
    parser = argparse.ArgumentParser()

    parser.add_argument('--circos',
        metavar='<str>',
        default='circos',
        help='''absolute path of circos executable. otherwise, `circos` must be in your `PATH` variable [%(default)s]''')

    parser.add_argument('--gb',
        metavar='<file>',
        required=True,
        help='input Genbank file')

    # color setting
    color_group = parser.add_argument_group('Color setting')

    color_group.add_argument('--cds_color',
        metavar='<str>',
        default='141,211,199',
        help='PCG color [%(default)s]')

    color_group.add_argument('--trna_color',
        metavar='<str>',
        default='251,128,114',
        help='tRNA color [%(default)s]')

    color_group.add_argument('--rrna_color',
        metavar='<str>',
        default='253,192,134',
        help='rRNA color [%(default)s]')

    color_group.add_argument('--label_color',
        metavar='<str>',
        default='black',
        help="gene name label color [%(default)s]")

    color_group.add_argument('--locus_color',
        metavar='<str>',
        default='black',
        help="locus name's clolor showed on center of circle [%(default)s]")


    # whether draw GC content circle
    gc_track_group = parser.add_argument_group('GC content track')

    gc_track_group.add_argument('--gc',
        choices=['yes', 'no'],
        default='no',
        help='whether draw GC content track [%(default)s]')

    gc_track_group.add_argument('--win',
        metavar='<str>',
        default=50,
        type=int,
        help='windows size for calculating GC content [%(default)s]')

    gc_track_group.add_argument('--gc_fill',
        metavar='<str>',
        default='128,177,211',
        help='color for filling the GC track [%(default)s]')


    # whether draw depth abundance circle
    abundance_track_group = parser.add_argument_group('Abundance track')

    abundance_track_group.add_argument('--depth_file',
        metavar='<file>',
        default='',
        help='''To draw abundance (sequencing depth) track. A file of
tab-separated table with three columns: reference name, position, and coverage
depth, which is generated by 'samtools depth' command. Or you can set
'--run_map yes' and '--fq1' and '--fq2' to get this information''')

    abundance_track_group.add_argument('--run_map',
        choices=['yes', 'no'],
        default='no',
        help='''Whether to map reads to references to get sequencing depth
information [%(default)s]''')

    abundance_track_group.add_argument('--bwa',
        metavar='<str>',
        default='bwa',
        help='''absolute path of bwa executable,
otherwise, `bwa` must be in your `PATH` variable [%(default)s]'''),

    abundance_track_group.add_argument('--thread',
        metavar='<int>',
        default=2,
        help="BWA thread number [%(default)s]")

    abundance_track_group.add_argument('--samtools',
        metavar='<str>',
        default='samtools',
        help='''absolute path of samtools executable,
otherwise, `samtools` must be in your `PATH` variable [%(default)s]''')

    abundance_track_group.add_argument('--opts_samtools',
        metavar='<str>',
        default="-a -a",
        help='optional arguments for samtools [%(default)s]')

    abundance_track_group.add_argument('--depth_fill',
        metavar='<str>',
        default='190,186,218',
        help='color for filling the abundance track [%(default)s]')

    abundance_track_group.add_argument('--fq1',
        metavar='<file>',
        default='',
        help='fastq 1 file')

    abundance_track_group.add_argument('--fq2',
        metavar='<file>',
        default='',
        help='fastq 2 file')


    # whether draw base around circle
    base_track_group = parser.add_argument_group('Base track')
    base_track_group.add_argument('--base',
        choices=['yes', 'no'],
        default='no',
        help='whether draw base track [%(default)s]')


    # outfile setting
    outfile_group = parser.add_argument_group('Outfile setting')

    outfile_group.add_argument('--bgc',
        metavar='<str>',
        default='white',
        help="background color or an image file [%(default)s]")

    outfile_group.add_argument('--outdir',
        metavar='<str>',
        default='./outdir',
        help="output directory [%(default)s]")

    outfile_group.add_argument('--png',
        choices=['yes', 'no'],
        default='yes',
        help='PNG format output [%(default)s]')

    outfile_group.add_argument('--svg',
        choices=['yes', 'no'],
        default='yes',
        help='SVG format output [%(default)s]')

    #if len(sys.argv) == 1:
    if not para_list or len(para_list) == 1:
        parser.print_help()
        parser.exit()

    args = parser.parse_args(para_list)

    args.gb = os.path.abspath(args.gb)
    if args.fq1:
        args.fq1 = os.path.abspath(args.fq1)
    if args.fq2:
        args.fq2 = os.path.abspath(args.fq2)

    if args.depth_file:
        args.depth_file = os.path.abspath(args.depth_file)
        args.run_map == 'no'

    if args.run_map == 'yes':
        if (args.fq1 and args.fq2 and os.path.isfile(args.fq1) and os.path.isfile(args.fq2)):
            args.fq1 = args.fq1 + ','

        elif args.fq1 and not os.path.isfile(args.fq1):
            sys.exit('''
If you set '--run_map yes' and '--fq1', the '--fq1' must be a file!''')

        elif args.fq2 and not os.path.isfile(args.fq2):
            sys.exit('''
If you set '--run_map yes' and '--fq2', the '--fq2' must be a file!''')

        elif args.fq1 and args.fq2:
            if not os.path.isfile(args.fq1) and not os.path.isfile(args.fq2):
                print(args, file=sys.stderr)
                sys.exit('''
If you set '--run_map yes', you must also set '--fq1' and/or  --fq2',
and probably '--bwa' and '--samtools'.
Or, you can provide '--depth_file' instead. ''')

    return args


def generate_config_file(config_file='visual_config.txt', **kwargs):
    config_content = '''
# where circos you install
circos_path     =   {circos}
bwa             =   {bwa}
samtools        =   {samtools}

threads         =   {thread}

# optional arguments for samtools
opts_samtools   =  {opts_samtools}

#color
cds             =   {cds_color}
rRNA            =   {rrna_color}
tRNA            =   {trna_color}

# whether draw GC content circle
gc              =   {gc}
win             =   {win}
gc_fill         =   {gc_fill}

# whether draw depth abundance circle
run_map           =   {run_map}
depth_file      =   {depth_file}
depth_fill      =   {depth_fill}
fq              =   {fq1}{fq2}

# whether draw base around circle
base            =   {base}

# locus name's clolor showed on center of circle
locus_color     =   {locus_color}

# gene name label color
label_color     =   {label_color}

# image
outdir          =   {outdir}
png             =   {png}
svg             =   {svg}

# color or file
background      =   {bgc}
#background     =   ./background.png

    '''.format(**kwargs)

    with open(config_file, 'w') as fhout:
        print(config_content, file=fhout)

    return os.path.abspath(config_file)


def run_wrapped_circos(perl=None, script=None, gb_file=None, config_file=None):
    cmd = '''{perl} {script} --gb {gb_file} --conf {config_file}
'''.format(perl=perl, script=script, gb_file=gb_file, config_file=config_file)

    runcmd(cmd)


def runcmd(command):
    try:
        current_time = time.strftime("%Y-%m-%d %H:%M:%S",
                        time.localtime(time.time()))
        print(current_time, "\n", command, "\n", sep="", flush=True)
        subprocess.check_call(command, shell=True)
    except:
        sys.exit("Error occured when running command:\n%s" % command)


def sort_gb_by_length(in_gb=None, out_gb=None):
    seqid_len_rec = {}
    for rec in SeqIO.parse(in_gb, 'gb'):
        seqlen = len(rec)
        seqid_len_rec[str(rec.id)] = (seqlen, rec)

    fhout = open(out_gb, 'w')
    for seqid, seqlen_rec in sorted(seqid_len_rec.items(), key=lambda x: x[1][0]):
        rec = seqlen_rec[1]
        SeqIO.write(rec, fhout, 'gb')
    fhout.close()

    return out_gb

def main(para_list=None):
    print(sys.executable)
    args = get_para(para_list)

    out_gb = os.path.basename(args.gb) + '.sortedByLength'
    sort_gb_by_length(in_gb=args.gb, out_gb=out_gb)
    args.gb = os.path.abspath(out_gb)

    config_file = generate_config_file(config_file='visual_config.txt', **vars(args))

    script = os.path.join(os.path.dirname(__file__),
        'draw_circos_for_mitogenome_auto_depth.pl')
    run_wrapped_circos(
        perl='perl',
        script=script,
        gb_file=args.gb,
        config_file=config_file)


if __name__ == '__main__':
    main(para_list=sys.argv[1:])

















