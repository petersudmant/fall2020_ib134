# 1. lines startswith '#' char will be ignored.
# 2. do not add comments at the end of the parameter lines.
# 3. the space around '=' will be ignored.

[module-all2-BEGIN] # do not touch this
###############################################################################
#####------------------------- all2 module -------------------------------#####
# Important: 'all2' module support single-end data and pair-end data

###################
# optional arguments

# which genetic code table to use? 'auto' means
# determined by '--clade' option.
genetic_code = auto

# which clade does your species belong to
# choose from "Chordata", "Arthropoda"
clade = Arthropoda

###################
# Common arguments

# output prefix
outprefix = ZZZ

# thread number
thread_number = 8

##################
# Input fastq files

# you can set `fastq1` only (and leave `fastq2` as default)
# if you use single-end data

# fastq 1 file
fastq1 =

# fastq 2 file
fastq2 =

# set 'True' if the input is in the Illumina 1.3 FASTQ-like (Q+64) format.
fastq_quality_shift =

# read length of fastq reads, used by SOAPTrans and bwa.
# It must be >= 71 bp
fastq_read_length = 150

# use only part (# Gbp) of the input fastq file in the
# analysis. By default, all data will be used.
# Support for all, all2, filter, assemble and findmitoscaf only.
fq_size = 5

######################
# Assembly arguments

# insert size of input fastq files
insert_size = 250

# 2 for quick_mode, 3 for multi-kmer mode
run_mode = 2

# when use '--run_mode 3', you should provide the fasta
# sequences from quick mode (if any).
quick_mode_seq_file =

# when use '--quick_mode_seq_file' option, you should also provide
# the protein coding genes names for each fasta sequence.
# per-line format:
# seqid gene1 gene2
quick_mode_fa_genes_file =

# when use '--run_mode 3', you should also provide the missing
# protein coding genes names
# multiple genes can be seperated by space
missing_PCGs =

# when use '--run_mode 3', you should provide the score file
# from quick mode (if any). e.g. the 'high_abundance' scores
quick_mode_score_file =

# when use '--run_mode 3', you should provide the sequence file
# which the '--quick_mode_score_file' is corresponding to in the
# quick mode (if any).
quick_mode_prior_seq_file =

######################
# Search mitochondrial sequences arguments

# choose from '1' and '3'
# 1: filter out non-requiring_taxa sequences by mito-PCGs
# annotation to do taxa assignment.
# 3: do not filter [%(default)s]
filter_taxa_method = 1

# the minimum abundance of sequence required
min_abundance = 10

# filtering out non-requiring taxa sequences
# which may be contamination
# this can be a class, order, family, genus, or species name
requiring_taxa = Arthropoda

# choose from ["0", "1", "2", "3", "4", "5", "6"]
# The relaxing threshold for filtering non-target-requiring_taxa.
# The larger digital means more relaxing.
requiring_relax = 0

######################
# Annotation arguments
# species name to use in output genbank file
species_name = Test sp.

[module-all2-END] # do not touch this


[module-all-BEGIN] # do not touch this
#################################################################################
#####-------------------------- all module ---------------------------------#####
# Important: 'all' module support pair-end data only

###################
# optional arguments

# which genetic code table to use? 'auto' means
# determined by '--clade' option.
genetic_code = auto

# which clade does your species belong to
# choose from "Chordata", "Arthropoda"
clade=Arthropoda

###################
# Common arguments

# output prefix
outprefix = ZZZ

# thread number
thread_number = 8

##################
# Input fastq files

# fastq 1 file
fastq1 =

# fastq 2 file
fastq2 =

# set 'True' if the input is in the Illumina 1.3 FASTQ-like (Q+64) format.
fastq_quality_shift =

# read length of fastq reads, used by SOAPTrans and bwa.
# It must be >= 71 bp
fastq_read_length = 150

# use only part (# Gbp) of the input fastq file in the
# analysis. By default, all data will be used.
# Support for all, all2, filter, assemble and findmitoscaf only.
fq_size = 5

######################
# Filter arguments

# input 1.adapter.list.gz file. will not filter adapter
# contamination if not provided
adapter1 =

# input 2.adapter.list.gz file. will not filter adapter
# contamination if not provided
adapter2 =

# output read1 fastq file
fastq3 = clean.1.fq.gz

# output read1 fastq file
fastq4 = clean.2.fq.gz

# set 'True' if you want to filter duplications (caused by PCRs
# After adapter ligation, thudirections of read1 & read2 of
# duplications should be completely identical)
duplication =

# cut-off adapter mis-match bases
adapter_mismatch = 3

# cut-off adapter align length
adapter_length = 15

# keep only bases between BEG and END for each read
# format: BEG,END
# use 'full_length_read' to do not trim the reads
keep_region = full_length_read

# the maximun N allowed per read
Ns_number = 10

# the maixmum percentage of low quality (ASCII code's integer)
# bases allowed in single end reads
# format: QUAL,CONT
low_quality = 55,20

######################
# Assembly arguments

# insert size of input fastq files
insert_size = 250

# 2 for quick_mode, 3 for multi-kmer mode
run_mode = 2

# when use '--run_mode 3', you should provide the fasta
# sequences from quick mode (if any).
quick_mode_seq_file =

# when use '--quick_mode_seq_file' option, you should also provide
# the protein coding genes names for each fasta sequence.
# per-line format:
# seqid gene1 gene2
quick_mode_fa_genes_file =

# when use '--run_mode 3', you should also provide the missing
# protein coding genes names
# multiple genes can be seperated by space
missing_PCGs =

# when use '--run_mode 3', you should provide the score file
# from quick mode (if any). e.g. the 'high_abundance' scores
quick_mode_score_file =

# when use '--run_mode 3', you should provide the sequence file
# which the '--quick_mode_score_file' is corresponding to in the
# quick mode (if any).
quick_mode_prior_seq_file =

######################
# Search mitochondrial sequences arguments

# choose from '1' and '3'
# 1: filter out non-requiring_taxa sequences by mito-PCGs
# annotation to do taxa assignment.
# 3: do not filter [%(default)s]
filter_taxa_method = 1

# the minimum abundance of sequence required
min_abundance = 10

# filtering out non-requiring taxa sequences
# which may be contamination
# this can be a class, order, family, genus, or species name
requiring_taxa = Arthropoda

# choose from ["0", "1", "2", "3", "4", "5", "6"]
# The relaxing threshold for filtering non-target-requiring_taxa.
# The larger digital means more relaxing.
requiring_relax = 0

######################
# Annotation arguments
# species name to use in output genbank file
species_name = Test sp.

[module-all-END] # do not touch this


[module-filter-BEGIN] # do not touch this
#################################################################################
#####------------------------ filter module --------------------------------#####
# Important: 'filter' module support pair-end data only

####### filter module ############
# Common arguments

# output prefix
outprefix = ZZZ

# thread number
thread_number = 8

##################
# Input fastq files

# Important: `filter` do not support single-end data

# fastq 1 file
fastq1 =

# fastq 2 file
fastq2 =

# set 'True' if the input is in the Illumina 1.3 FASTQ-like (Q+64) format.
fastq_quality_shift =

# read length of fastq reads, used by SOAPTrans and bwa.
# It must be >= 71 bp
fastq_read_length = 150

# use only part (# Gbp) of the input fastq file in the
# analysis. By default, all data will be used.
# Support for all, all2, filter, assemble and findmitoscaf only.
fq_size = 5

########################
# Filter arguments

# input 1.adapter.list.gz file. will not filter adapter
# contamination if not provided
adapter1 =

# input 2.adapter.list.gz file. will not filter adapter
# contamination if not provided
adapter2 =

# output read1 fastq file
fastq3 = clean.1.fq.gz

# output read1 fastq file
fastq4 = clean.2.fq.gz

# set 'True' if you wantfilter duplications (caused by PCRs After adapter
# ligation, thus directions of read1 & read2 of duplications
# should be completely identical)
duplication =

# cut-off adapter mis-match bases
adapter_mismatch = 3

# cut-off adapter align length
adapter_length = 15

# keep only bases between BEG and END for each read
# format: BEG,END
# use 'full_length_read' to do not trim the reads
keep_region = full_length_read

# the maximun N allowed per read
Ns_number = 10

# the maixmum percentage of low quality (ASCII code's integer)
# bases allowed in single end reads
# format: QUAL,CONT
low_quality = 55,20

[module-filter-END] # do not touch this


[module-assemble-BEGIN] # do not touch this
#################################################################################
#####------------------------ assemble module ------------------------------#####
# Important: 'assemble' module support single-end data and pair-end data

###################
# optional arguments

# which genetic code table to use? 'auto' means
# determined by '--clade' option.
genetic_code = auto

# which clade does your species belong to
# choose from "Chordata", "Arthropoda"
clade=Arthropoda

###################
# Common arguments

# output prefix
outprefix = ZZZ

# thread number
thread_number = 8

##################
# Input fastq files

# you can set `fastq1` only (and leave `fastq2` as default)
# if you use single-end data

# fastq 1 file
fastq1 =

# fastq 2 file
fastq2 =

# set 'True' if the input is in the Illumina 1.3 FASTQ-like (Q+64) format.
fastq_quality_shift =

# read length of fastq reads, used by SOAPTrans and bwa.
# It must be >= 71 bp
fastq_read_length = 150

# use only part (# Gbp) of the input fastq file in the
# analysis. By default, all data will be used.
# Support for all, all2, filter, assemble and findmitoscaf only.
fq_size = 5

######################
# Assembly arguments

# insert size of input fastq files
insert_size = 250

# 2 for quick_mode, 3 for multi-kmer mode
run_mode = 2

# when use '--run_mode 3', you should provide the fasta
# sequences from quick mode (if any).
quick_mode_seq_file =

# when use '--quick_mode_seq_file' option, you should also provide
# the protein coding genes names for each fasta sequence.
# per-line format:
# seqid gene1 gene2
quick_mode_fa_genes_file =

# when use '--run_mode 3', you should also provide the missing
# protein coding genes names
# multiple genes can be seperated by space
missing_PCGs =

# when use '--run_mode 3', you should provide the score file
# from quick mode (if any). e.g. the 'high_abundance' scores
quick_mode_score_file =

# when use '--run_mode 3', you should provide the sequence file
# which the '--quick_mode_score_file' is corresponding to in the
# quick mode (if any).
quick_mode_prior_seq_file =

######################
# Search mitochondrial sequences arguments

# choose from '1' and '3'
# 1: filter out non-requiring_taxa sequences by mito-PCGs
# annotation to do taxa assignment.
# 3: do not filter [%(default)s]
filter_taxa_method = 1

# the minimum abundance of sequence required
min_abundance = 10

# filtering out non-requiring taxa sequences
# which may be contamination
# this can be a class, order, family, genus, or species name
requiring_taxa = Arthropoda

# choose from ["0", "1", "2", "3", "4", "5", "6"]
# The relaxing threshold for filtering non-target-requiring_taxa.
# The larger digital means more relaxing.
requiring_relax = 0

[module-assemble-END] # do not touch this


[module-findmitoscaf-BEGIN] # do not touch this
#################################################################################
#####--------------------- findmitoscaf module -----------------------------#####
# Important: 'findmitoscaf' module support pair-end data only

###################
# optional arguments

# which genetic code table to use? 'auto' means
# determined by '--clade' option.
genetic_code = auto

# which clade does your species belong to
# choose from "Chordata", "Arthropoda"
clade = Arthropoda

# set 'True' if the input fasta generated by SOAPTrans.
# if not, leave it as empty, and '-- fastq1' and '--fastq2' must be set!
from_soaptrans =

###################
# Common arguments

# output prefix
outprefix = ZZZ

# thread number
thread_number = 8

###################
# Input fasta file. required.
fastafile=

##################
# Input fastq files

# fastq 1 file
fastq1 =

# fastq 2 file
fastq2 =

# set 'True' if the input is in the Illumina 1.3 FASTQ-like (Q+64) format.
fastq_quality_shift =

# read length of fastq reads, used by SOAPTrans and bwa.
# It must be >= 71 bp
fastq_read_length = 150

# use only part (# Gbp) of the input fastq file in the
# analysis. By default, all data will be used.
# Support for all, all2, filter, assemble and findmitoscaf only.
fq_size = 5


######################
# Search mitochondrial sequences arguments

# choose from '1' and '3'
# 1: filter out non-requiring_taxa sequences by mito-PCGs
# annotation to do taxa assignment.
# 3: do not filter [%(default)s]
filter_taxa_method = 1

# the minimum abundance of sequence required
min_abundance = 10

# filtering out non-requiring taxa sequences
# which may be contamination
# this can be a class, order, family, genus, or species name
requiring_taxa = Arthropoda

# choose from ["0", "1", "2", "3", "4", "5", "6"]
# The relaxing threshold for filtering non-target-requiring_taxa.
# The larger digital means more relaxing.
requiring_relax = 0

[module-findmitoscaf-END] # do not touch this


[module-annotate-BEGIN] # do not touch this
#################################################################################
#####------------------------- annotate module -----------------------------#####
# Important: 'annotate' module support single-end and pair-end data

###################
# optional arguments

# which genetic code table to use? 'auto' means
# determined by '--clade' option.
genetic_code = auto

# which clade does your species belong to
# choose from "Chordata", "Arthropoda"
clade = Arthropoda

# you can set `fastq1` only (and leave `fastq2` as default)
# if you use single-end data

# fastq 1 file, if you want to draw depth
fastq1 =

# fastq 2 file, if you want to draw depth
fastq2 =

# choose from ["linear", "circular"]
# the sequences are circular? (seq length must be >= 12Kbp)
topology = linear

###################
# Common arguments

# output prefix
outprefix = ZZZ

# thread number
thread_number = 8

###################
# Input fasta file. required.
fastafile =

[module-annotate-END] # do not touch this


[module-visualize-BEGIN] # do not touch this
#################################################################################
#####---------------------- visualize module -------------------------------#####
# Important: 'visualize' module support single-end and pair-end data

###################
# optional arguments

# absolute path of circos executable. otherwise,
# `circos` must be in your `PATH` variable
circos = circos

# input Genbank file. required
gb =

###################
# color setting

# PCG color
cds_color = 141,211,199

# tRNA color
trna_color = 251,128,114

# rRNA color
rrna_color = 253,192,134

# gene name label color
label_color = black

# locus name's clolor showed on center of circle
locus_color = black

# whether draw GC content track
# choose from ['yes', 'no']
gc = no

# windows size for calculating GC content
win = 50

# color for filling the GC track
gc_fill = 128,177,211

# whether draw depth abundance circle

# To draw abundance (sequencing depth) track.
# A file of tab-separated table with three columns:
# reference name, position, and coverage depth
# , which is generated by 'samtools depth' command.
# Or you can set '--run_map yes' and '--fq1' and/or
# '--fq2' to get this information
depth_file =

# choose from ['yes', 'no']
# Whether to map reads to references to get sequencing
# depth information
run_map = no

# absolute path of bwa executable,
# otherwise, `bwa` must be in your `PATH` variable
bwa = bwa

# BWA thread number
thread = 2

# absolute path of samtools executable,
# otherwise, `samtools` must be in your `PATH` variable
samtools = samtools

# optional arguments for samtools
opts_samtools = -a -a

# color for filling the abundance track
depth_fill = 190,186,218

# fastq 1 file
fq1 =

# fastq 2 file
fq2 =

# whether draw base track
# choose from ['yes', 'no']
base = no

# Outfile setting

# background color or an image file
bgc=white

# output directory
outdir = ./outdir

# PNG format output
# choose from ['yes', 'no']
png = yes

# SVG format output
# choose from ['yes', 'no']
svg = yes

[module-visualize-END] # do not touch this
